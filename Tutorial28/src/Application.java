import java.util.ArrayList;

//This tutorial is about how to use the wildcard with generic parameterized classes in java

/*Last tutorial--Some examples of parameterized generic classes that can work with any type of object that
 * you specify when declaring a class and creating (optional in java 7) an object*/
class Machine{

	@Override//generated by Right click-->source-->Generate toString()-->check toString() and click OK
	public String toString() {
		return "I am a machine";
	}
	
	public void start(){
		System.out.println("Machine started");
		
	}
}

class Camera extends Machine{
	
	@Override
	public String toString() {
		return "I am a camera";
	}	
	
	public void snap(){
		
		System.out.println("snap");
	}
}

public class Application {
	
	public static void main(String args[]){
		
		ArrayList<String> list=new ArrayList<String>();
		
		/*Something that tends to confuse people is the passing of the generic, parameterized object (list)
		 *into a method parameter*/
		
		list.add("one");
		list.add("two");
		
		showList(list);
		
		ArrayList<Machine> machineList=new ArrayList<Machine>();
		
		machineList.add(new Machine());
		machineList.add(new Machine());
		
		showMachineList(machineList);

		ArrayList<Camera> cameraList = new ArrayList<Camera>();

		cameraList.add(new Camera());
		cameraList.add(new Camera());
		
		/*Can't do this at first because ArrayList<Camera> is not a subclass of ArrayList<Machine>*/
		showMachineList(cameraList);
		//BUT there is a way we can do this (wildcards)
		
		//CAN'T DO THIS-see showList2 method below
		//showList2(list);
		
	}
	
	/*REMEMBER: we are making this method static because there is no instance of the object 'Application'
	to refer to when calling this method from the main method*/
									  //'?' is a wildcard that stands for 'class of unknown type'
									 //think of a mysqli prepared statement!
	public static void showList(ArrayList<?> objectList){	
		
		for(Object value: objectList){
		
			System.out.println(value);
		}
	}
		
	//There a lot of other things you can do with wildcards in Java....
		
	//Specifying an upper bound for a wildcard
	public static void showMachineList(ArrayList<? extends Machine> machineList){	
				
		for(Machine value: machineList){
			
			System.out.println(value);
			value.start();//REMEMBER: Camera has inherited start() method from Machine
			//value.snap()CAN'T DO THIS--can't call camera methods
		}
	}
	
	//Specifying a lower bound for a wildcard
	/*this method applies to the 'Camera' and 'Machine' classes that both share the toString() method BUT
	 *does not apply to the 'String' class because it is not a parent class of 'Camera' 
	 */
	public static void showList2(ArrayList<? super Camera> objectList){	
		
		for(Object value: objectList){
		
			System.out.println(value);
		}
	}
}
